{"version":3,"sources":["components/navbar/Navbar.js","components/home/Home.js","components/card/Card.js","redux/reducers/cards/cardActionCreators.js","redux/reducers/cards/cardActionTypes.js","redux/reducers/user/userActionCreators.js","redux/reducers/user/userActionTypes.js","components/generalAssets/textBoxes/Textbox.js","components/generalAssets/textBoxes/LargeTextbox.js","components/generalAssets/buttons/Button.js","components/generalAssets/buttons/CheckBox.js","components/createCard/CreateCard.js","components/account/CreateAccount.js","redux/reducers/collections/collectionActionCreators.js","redux/reducers/collections/collectionActionTypes.js","components/collections/CreateCollection.js","components/collections/ViewAllCollections.js","components/account/Login.js","App.js","serviceWorker.js","redux/reducers/cards/cardReducer.js","redux/reducers/user/userReducer.js","redux/reducers/collections/collectionReducer.js","index.js","redux/configureStore.js"],"names":["Navbar","className","to","connect","state","cardReducer","props","Card","signup","toggle","setState","prevState","thing","this","onClick","React","Component","updateCardField","e","type","payload","target","name","value","cardCreated","message","updateUserField","userPreCheck","user","preventDefault","username","password","passwordDouble","createUser","dispatch","a","fetch","method","headers","body","JSON","stringify","response","json","userCreated","login","console","log","loggedIn","mapDispatchToProps","userReducer","htmlFor","field","toUpperCase","placeholder","onChange","rows","Button","onEnter","updateCheckBox","collectionReducer","checkField","public","description","createCard","card","id","required","reducer","Object","values","map","toString","collectionCreated","updateCollectionField","createCollection","collection","ViewAllCollections","collections","componentDidMount","i","key","tags","tag","loginPreCheck","App","exact","path","render","CreateAccount","Boolean","window","location","hostname","match","defaultCardState","title","example","reference","action","keys","defaultUserState","fullname","email","phone","defaultColectionStore","store","createStore","combineReducers","applyMiddleware","thunk","logger","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"4VA8BeA,G,MAzBA,WACb,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,yBAAKD,UAAU,QACb,kBAAC,IAAD,CAAMC,GAAG,gBAAT,gBAEF,yBAAKD,UAAU,QACb,kBAAC,IAAD,CAAMC,GAAG,oBAAT,gBAEF,yBAAKD,UAAU,QACb,kBAAC,IAAD,CAAMC,GAAG,sBAAT,sBAEF,yBAAKD,UAAU,QACb,kBAAC,IAAD,CAAMC,GAAG,mBAAT,mBAEF,yBAAKD,UAAU,QACb,kBAAC,IAAD,CAAMC,GAAG,UAAT,c,OCROC,eAJS,SAACC,GAAD,MAAY,CAClCC,YAAaD,EAAMC,eAGNF,EAbF,SAACG,GACZ,OACE,6BACE,gD,gCC8BSC,G,kNAhCbH,MAAQ,CACNI,QAAQ,G,EAGVC,OAAS,WACP,EAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5BH,QAASG,EAAUH,Y,uDAIrB,IAAIC,EACAG,EAKJ,OAHKH,EADLI,KAAKT,MAAMI,OACG,mBACA,6BACOI,EAArBC,KAAKT,MAAMI,OAAkB,eAA2B,OAEtD,yBAAKP,UAAU,0BACb,6BAASA,UAAU,aACjB,yBAAKA,UAAWW,GACd,yBAAKX,UAAU,kBAAf,SACA,yBAAKA,UAAU,iBAAf,aAGJ,4BAAQA,UAAU,gBAAgBa,QAASD,KAAKJ,QAC7CA,Q,GA1BQM,IAAMC,Y,+BCDZC,EAAkB,SAACC,GAAD,MAAQ,CACrCC,KCM0B,eDL1BC,QAAQ,eAAIF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,SA2B1BC,EAAc,SAACC,GAAD,MAAc,CACvCN,KCnB0B,eDoB1BC,QAASK,IE/BEC,EAAkB,SAACR,GAC9B,MAAO,CACLC,KCJ6B,oBDK7BC,QAAQ,eAAIF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,SAI5BI,EAAe,SAACT,EAAGU,GAE9B,OADAV,EAAEW,iBACGD,EAAKE,UAAaF,EAAKG,UAAaH,EAAKI,eAMhCC,EAAWL,GALhB,CACLT,KCZuB,gBDavBC,QACE,yEAKKa,EAAa,SAACL,GAAD,8CAAU,WAAOM,GAAP,eAAAC,EAAA,sEAEbC,MAAM,kDAEzB,CACEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUb,KATS,cAE9Bc,EAF8B,gBAYjBA,EAASC,OAZQ,OAYlCD,EAZkC,OAalCR,EAASU,EAAYF,EAASjB,UAbI,2CAAV,uDAgBbmB,EAAc,SAACnB,GAAD,MAAc,CACvCN,KCnC0B,eDoC1BC,QAASK,IAaEoB,EAAQ,SAACjB,GAAD,8CAAU,WAAOM,GAAP,eAAAC,EAAA,6DAC7BW,QAAQC,IAAI,aAAcnB,GADG,SAERQ,MAAM,iDAAkD,CAC3EC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUb,KAPM,cAEzBc,EAFyB,gBASZA,EAASC,OATG,OAS7BD,EAT6B,OAU7BR,EAASc,EAASN,EAASjB,UAVE,2CAAV,uDAaRuB,EAAW,SAACvB,GAAD,MAAc,CACpCN,KC7DmB,QD8DnBC,QAASK,IE9BLwB,G,MAAqB,CACzBhC,gBAAiB,SAACC,GAAD,OAAOD,EAAgBC,IACxCQ,gBAAiB,SAACR,GAAD,OAAOQ,EAAgBR,MAG3Bf,eAVS,SAACC,GAAD,MAAY,CAClCC,YAAaD,EAAMC,YACnB6C,YAAa9C,EAAM8C,eAQmBD,EAAzB9C,EAzBC,SAACG,GACf,OACE,yBAAKL,UAAU,WACb,2BAAOkD,QAAS7C,EAAM8C,OAAQ9C,EAAM8C,MAAMC,cAA1C,KACA,2BACElC,KAAMb,EAAMa,MAAQ,OACpBG,KAAMhB,EAAM8C,MACZE,YAAahD,EAAM8C,MACnBG,SAAU,SAACrC,GAAD,OAAOZ,EAAM4B,SAAShB,EAAGZ,IACnCiB,MAAOjB,EAAMF,MAAME,EAAM8C,aCC3BH,EAAqB,CACzBhC,gBAAiB,SAACC,GAAD,OAAOD,EAAgBC,KAG3Bf,eARS,SAACC,GAAD,MAAY,CAClCC,YAAaD,EAAMC,eAOmB4C,EAAzB9C,EAxBM,SAACG,GACpB,OACE,yBAAKL,UAAU,WACb,2BAAOkD,QAAS7C,EAAM8C,OAAQ9C,EAAM8C,MAAMC,cAA1C,KACA,8BACElC,KAAK,OACLG,KAAMhB,EAAM8C,MACZE,YAAahD,EAAM8C,MACnBI,KAAM,EACND,SAAUjD,EAAMW,gBAChBM,MAAOjB,EAAMD,YAAYC,EAAM8C,aCVxBK,EAJA,SAACnD,GACd,OAAO,4BAAQQ,QAAS,SAACI,GAAD,OAAOZ,EAAMoD,QAAQxC,KAAtC,aC4BH+B,EAAqB,CACzBU,eAAgB,SAACzC,GAAD,OPzBY,SAACA,GAC7B,MAAO,CACLC,KCC2B,kBDA3BC,QAAS,CAACF,EAAEG,OAAOC,OOsBEqC,CAAezC,KAGzBf,eATS,SAACC,GAAD,MAAY,CAClCC,YAAaD,EAAMC,YACnBuD,kBAAmBxD,EAAMwD,qBAOaX,EAAzB9C,EAzBE,SAACG,GAChB,OACE,yBAAKL,UAAU,WACb,6BACE,2BACEkB,KAAK,WACLG,KAAMhB,EAAMuD,WACZtC,MAAOjB,EAAMD,YAAYyD,OACzBP,SAAUjD,EAAMqD,iBAElB,2BAAOR,QAAS7C,EAAMuD,YAAavD,EAAMyD,kBCiD3Cd,EAAqB,CACzBhC,gBAAiB,SAACC,GAAD,OAAOD,EAAgBC,IACxC8C,WAAY,SAAC9C,EAAG+C,GAAJ,ORzDY,SAAC/C,EAAG+C,GAAJ,8CAAa,WAAO/B,GAAP,eAAAC,EAAA,6DACrCjB,EAAEW,iBACFiB,QAAQC,IAAI,iBAFyB,SAGhBX,MAAM,kDAEzB,CACEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUwB,KAVY,cAGjCvB,EAHiC,gBAapBA,EAASC,OAbW,OAarCD,EAbqC,OAcrCR,EAASV,EAAYkB,EAASjB,UAdO,2CAAb,sDQyDCuC,CAAW9C,EAAG+C,KAG1B9D,eATS,SAACC,GAAD,MAAY,CAClCC,YAAaD,EAAMC,eAQmB4C,EAAzB9C,EA5DI,SAACG,GAClB,OACE,6BACE,wCACA,0BAAM4D,GAAG,oBACP,yBAAKjE,UAAU,YACb,kBAAC,EAAD,CACEmD,MAAM,OACNe,UAAU,EACV/D,MAAOE,EAAMD,YACb6B,SAAU,SAAChB,GAAD,OAAOZ,EAAMW,gBAAgBC,MAEzC,kBAAC,EAAD,CACEkC,MAAM,QACNe,UAAU,EACV/D,MAAOE,EAAMD,YACb6B,SAAU,SAAChB,GAAD,OAAOZ,EAAMW,gBAAgBC,MAEzC,kBAAC,EAAD,CAAckC,MAAM,cAAce,UAAU,IAC5C,kBAAC,EAAD,CAAcf,MAAM,YACpB,kBAAC,EAAD,CACEA,MAAM,YACNhD,MAAOE,EAAMD,YACb6B,SAAU,SAAChB,GAAD,OAAOZ,EAAMW,gBAAgBC,MAEzC,kBAAC,EAAD,CACEkC,MAAM,OACNhD,MAAOE,EAAMD,YACb6B,SAAU,SAAChB,GAAD,OAAOZ,EAAMW,gBAAgBC,MAEzC,kBAAC,EAAD,CACE2C,WAAW,SACXE,YAAY,qBACZK,QAAQ,SAEV,kBAAC,EAAD,CACEV,QAAS,SAACxC,GAAD,OAAOZ,EAAM0D,WAAW9C,EAAGZ,EAAMD,cAC1C+D,QAAQ,WAId,4BAAK9D,EAAMD,YAAYoB,SACvB,4BACG4C,OAAOC,OAAOhE,EAAMD,aAAakE,KAAI,SAAChD,GACrC,OAAO,4BAAKA,EAAMiD,oBCStBvB,EAAqB,CACzBvB,gBAAiB,SAACR,GAAD,OAAOQ,EAAgBR,IACxCe,WAAY,SAACf,EAAGU,GAAJ,OAAaK,EAAWf,EAAGU,IACvCD,aAAc,SAACT,EAAGU,GAAJ,OAAaD,EAAaT,EAAGU,KAG9BzB,eAVS,SAACC,GAAD,MAAY,CAClC8C,YAAa9C,EAAM8C,eASmBD,EAAzB9C,EA9DM,SAACG,GACpB,OACE,6BACE,iDACA,6BACE,kBAAC,EAAD,CACE8C,MAAM,WACNe,UAAU,EACV/D,MAAOE,EAAM4C,YACbhB,SAAU,SAAChB,GAAD,OAAOZ,EAAMoB,gBAAgBR,MAEzC,kBAAC,EAAD,CACEkC,MAAM,WACNjC,KAAK,WACLgD,UAAU,EACV/D,MAAOE,EAAM4C,YACbhB,SAAU,SAAChB,GAAD,OAAOZ,EAAMoB,gBAAgBR,MAEzC,kBAAC,EAAD,CACEkC,MAAM,iBACNjC,KAAK,WACLgD,UAAU,EACV/D,MAAOE,EAAM4C,YACbhB,SAAU,SAAChB,GAAD,OAAOZ,EAAMoB,gBAAgBR,MAEzC,kBAAC,EAAD,CACEkC,MAAM,WACNhD,MAAOE,EAAM4C,YACbhB,SAAU,SAAChB,GAAD,OAAOZ,EAAMoB,gBAAgBR,MAEzC,kBAAC,EAAD,CACEkC,MAAM,QACNjC,KAAK,QACLf,MAAOE,EAAM4C,YACbhB,SAAU,SAAChB,GAAD,OAAOZ,EAAMoB,gBAAgBR,MAEzC,kBAAC,EAAD,CACEkC,MAAM,QACNjC,KAAK,MACLf,MAAOE,EAAM4C,YACbhB,SAAU,SAAChB,GAAD,OAAOZ,EAAMoB,gBAAgBR,OAG3C,kBAAC,EAAD,CACEwC,QAAS,SAACxC,GAAD,OAAOZ,EAAMqB,aAAaT,EAAGZ,EAAM4C,cAC5CkB,QAAQ,SAEV,4BAAK9D,EAAM4C,YAAYzB,aCpBhBgD,EAAoB,SAAChD,GAAD,MAAc,CAC7CN,KClCgC,qBDmChCC,QAASK,IESLwB,G,MAAqB,CACzByB,sBAAuB,SAACxD,GAAD,OFhDY,SAACA,GAEpC,OADA4B,QAAQC,IAAI,eACL,CACL5B,KCLmC,0BDMnCC,QAAQ,eAAIF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,QE4CTmD,CAAsBxD,IACpDyD,iBAAkB,SAACzD,EAAG0D,GAAJ,OF9BY,SAAC1D,EAAG0D,GAAJ,8CAAmB,WAAO1C,GAAP,eAAAC,EAAA,6DACjDjB,EAAEW,iBACFiB,QAAQC,IAAI,uBAFqC,SAG5BX,MAAM,wDAEzB,CACEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUmC,KAVwB,cAG7ClC,EAH6C,gBAahCA,EAASC,OAbuB,OAajDD,EAbiD,OAcjDR,EAASuC,EAAkB/B,EAASjB,UAda,2CAAnB,sDE8BOkD,CAAiBzD,EAAG0D,MAG5CzE,eATS,SAACC,GAAD,MAAY,CAClCwD,kBAAmBxD,EAAMwD,qBAQaX,EAAzB9C,EAzCU,SAACG,GAExB,OADAwC,QAAQC,IAAI,YAAazC,EAAMsD,mBAE7B,6BACE,6BACE,oDACA,kBAAC,EAAD,CACER,MAAM,OACNe,UAAU,EACV/D,MAAOE,EAAMsD,kBACb1B,SAAU,SAAChB,GAAD,OAAOZ,EAAMoE,sBAAsBxD,MAE/C,kBAAC,EAAD,CACEkC,MAAM,OACNe,UAAU,EACV/D,MAAOE,EAAMsD,kBACb1B,SAAU,SAAChB,GAAD,OAAOZ,EAAMoE,sBAAsBxD,MAE/C,kBAAC,EAAD,CACEkD,QAAQ,aACRP,WAAW,SACXE,YAAY,uBAEd,kBAAC,EAAD,CACEL,QAAS,SAACxC,GAAD,OAAOZ,EAAMqE,iBAAiBzD,EAAGZ,EAAMsD,uBAGpD,4BAAKtD,EAAMsD,kBAAkBnC,aCoBpBoD,E,4MAvDbzE,MAAQ,CACN0E,YAAa,I,EAGfC,kB,sBAAoB,4BAAA5C,EAAA,sEACMC,MAAM,qDAE5B,CACEC,OAAQ,MACRC,QAAS,CACP,eAAgB,sBANJ,cACdwC,EADc,gBAUEA,EAAYnC,OAVd,OAUlBmC,EAVkB,OAWlB,EAAKpE,SAAS,CACZoE,YAAaA,IAZG,2C,uDA8BlB,OADAhC,QAAQC,IAAI,wBAAyBlC,KAAKT,MAAM0E,aAE9C,6BACE,uDACA,yBAAK7E,UAAU,mBACZY,KAAKT,MAAM0E,YAAYP,KAAI,SAACK,EAAYI,GACvC,OACE,yBAAKC,IAAKD,EAAG/E,UAAU,cACrB,4BAAK2E,EAAWtD,MAChB,qCACCsD,EAAWM,KAAKX,KAAI,SAACY,EAAKH,GACzB,OAAO,uBAAGC,IAAKD,GAAIG,gB,GA7CJnE,aCwC3BiC,EAAqB,CACzBvB,gBAAiB,SAACR,GAAD,OAAOQ,EAAgBR,IACxCe,WAAY,SAACf,EAAGU,GAAJ,OAAaK,EAAWf,EAAGU,IACvCD,aAAc,SAACT,EAAGU,GAAJ,OAAaD,EAAaT,EAAGU,IAC3CwD,cAAe,SAAClE,EAAGU,GAAJ,OZPY,SAACV,EAAGU,GAE/B,GADAV,EAAEW,kBACGD,EAAKE,WAAaF,EAAKG,SAC1B,MAAO,CACLZ,KC1CsB,eD2CtBC,QAAS,wCAENyB,EAAMjB,GYAewD,CAAclE,EAAGU,KAGhCzB,eAXS,SAACC,GAAD,MAAY,CAClC8C,YAAa9C,EAAM8C,eAUmBD,EAAzB9C,EAvCD,SAACG,GACb,OACE,6BACE,qCACA,6BACE,kBAAC,EAAD,CACE8C,MAAM,WACNe,UAAU,EACV/D,MAAOE,EAAM4C,YACbhB,SAAU,SAAChB,GAAD,OAAOZ,EAAMoB,gBAAgBR,MAEzC,kBAAC,EAAD,CACEkC,MAAM,WACNjC,KAAK,WACLgD,UAAU,EACV/D,MAAOE,EAAM4C,YACbhB,SAAU,SAAChB,GAAD,OAAOZ,EAAMoB,gBAAgBR,MAEzC,kBAAC,EAAD,CACEwC,QAAS,SAACxC,GAAD,OAAOZ,EAAM8E,cAAclE,EAAGZ,EAAM4C,cAC7CkB,QAAQ,UAGZ,4BAAK9D,EAAM4C,YAAYzB,aCYd4D,G,MAjCH,WACV,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAClF,GAAD,OAAW,kBAAC,EAASA,MACnD,kBAAC,IAAD,CAAOgF,OAAK,EAACC,KAAK,QAAQC,OAAQ,SAAClF,GAAD,OAAW,kBAAC,EAASA,MACvD,kBAAC,IAAD,CACEgF,OAAK,EACLC,KAAK,eACLC,OAAQ,SAAClF,GAAD,OAAW,kBAAC,EAAeA,MAErC,kBAAC,IAAD,CACEgF,OAAK,EACLC,KAAK,qBACLC,OAAQ,SAAClF,GAAD,OAAW,kBAAC,EAAqBA,MAE3C,kBAAC,IAAD,CACEgF,OAAK,EACLC,KAAK,kBACLC,OAAQ,SAAClF,GAAD,OAAW,kBAACmF,EAAkBnF,MAExC,kBAAC,IAAD,CAAOgF,OAAK,EAACC,KAAK,SAASC,OAAQ,SAAClF,GAAD,OAAW,kBAAC,EAAUA,MACzD,kBAAC,IAAD,CACEgF,OAAK,EACLC,KAAK,mBACLC,OAAQ,SAAClF,GAAD,OAAW,kBAAC,EAAuBA,UC5BjCoF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4CCjBFC,EAAmB,CACrB5E,KAAM,GACN6E,MAAO,GACPjC,YAAa,GACbkC,QAAS,GACTC,UAAW,GACXhB,KAAM,GACNpB,QAAQ,EACRrC,QAAS,IAGEpB,EAAc,WAAuC,IAAtCD,EAAqC,uDAA7B2F,EAAkBI,EAAW,uCAC/D,OAAQA,EAAOhF,MACb,IhBLwB,egBMtB,OAAO,2BACFf,GADL,kBAEGiE,OAAO+B,KAAKD,EAAO/E,SAAS,GAAKiD,OAAOC,OAAO6B,EAAO/E,SAAS,KAEpE,IhBT2B,kBgBUzB,OAAO,2BACFhB,GADL,kBAEG+F,EAAO/E,SAAWhB,EAAM+F,EAAO/E,WAEpC,IhBXwB,egBYtB,OAAO,2BACF2E,GADL,IAEEtE,QAAS0E,EAAO/E,UAEpB,QACE,OAAOhB,IC7BTiG,GAAmB,CACrBvE,SAAU,GACVC,SAAU,GACVC,eAAgB,GAChBsE,SAAU,GACVC,MAAO,GACPC,MAAO,GACP/E,QAAS,GACTjB,QAAQ,GAGG0C,GAAc,WAAuC,IAAtC9C,EAAqC,uDAA7BiG,GAAkBF,EAAW,uCAC/D,OAAQA,EAAOhF,MACb,Ifd6B,oBee3B,OAAO,2BACFf,GADL,kBAEGiE,OAAO+B,KAAKD,EAAO/E,SAAS,GAAKiD,OAAOC,OAAO6B,EAAO/E,SAAS,KAEpE,IflByB,gBemBvB,OAAO,2BACFhB,GADL,IAEEqB,QAAS0E,EAAO/E,UAEpB,IftBwB,eeuBtB,OAAO,2BACFiF,IADL,IAEE5E,QAAS,2BAEb,If1BwB,ee2BtB,OAAO,2BACFrB,GADL,IAEEqB,QAAS0E,EAAO/E,UAEpB,If9BiB,Qe+Bf,OAAO,2BACFhB,GADL,IAEE2B,SAAU,KAEd,QACE,OAAO3B,ICvCTqG,GAAwB,CAC1BnF,KAAM,GACN4D,KAAM,GACNpB,QAAQ,EACRrC,QAAS,IAGEmC,GAAoB,WAA4C,IAA3CxD,EAA0C,uDAAlCqG,GAAuBN,EAAW,uCAC1E,OAAQA,EAAOhF,MACb,IRVmC,0BQYjC,OADA2B,QAAQC,IAAI,QAASoD,EAAO/E,SACrB,2BACFhB,GADL,kBAEGiE,OAAO+B,KAAKD,EAAO/E,SAAS,GAAKiD,OAAOC,OAAO6B,EAAO/E,SAAS,KAEpE,IRb2B,kBQczB,OAAO,2BACFhB,GADL,kBAEG+F,EAAO/E,SAAWhB,EAAM+F,EAAO/E,WAEpC,IRhB8B,qBQkB5B,OADA0B,QAAQC,IAAI,aAAcoD,EAAO/E,SAC1B,2BACFqF,IADL,IAEEhF,QAAS,4BAEb,QACE,OAAOrB,ICnBPsG,GCDUC,YACZC,YAAgB,CAAEvG,cAAa6C,eAAaU,uBAC5CiD,YAAgBC,IAAOC,MDC3BC,IAASxB,OACP,kBAAC,IAAMyB,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,IACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAINQ,SAASC,eAAe,SJgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7E,QAAQ6E,MAAMA,EAAMlG,c","file":"static/js/main.9ecc03e2.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './navbar.css';\n\nconst Navbar = () => {\n  return (\n    <div className='navbar-container'>\n      <div className='link'>\n        <Link to='/'>Home</Link>\n      </div>\n      <div className='link'>\n        <Link to='/create-card'>Create Card</Link>\n      </div>\n      <div className='link'>\n        <Link to='/collections/all'>Collections</Link>\n      </div>\n      <div className='link'>\n        <Link to='/create-collection'>Create Collection</Link>\n      </div>\n      <div className='link'>\n        <Link to='/create-account'>Create Account</Link>\n      </div>\n      <div className='link'>\n        <Link to='/login'>Log In</Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst Home = (props) => {\n  return (\n    <div>\n      <h1>THIS IS HOME</h1>\n      {/* <h2>{props.cardReducer.type}</h2> */}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  cardReducer: state.cardReducer,\n});\n\nexport default connect(mapStateToProps)(Home);\n","import React from 'react';\nimport './card.css';\n\nclass Card extends React.Component {\n  state = {\n    signup: false,\n  };\n\n  toggle = () => {\n    this.setState((prevState) => ({\n      signup: !prevState.signup,\n    }));\n  };\n  render() {\n    let toggle;\n    let thing;\n    this.state.signup\n      ? (toggle = 'Go back to Login')\n      : (toggle = 'or, Create an Account Now!');\n    this.state.signup ? (thing = 'card flipped') : (thing = 'card');\n    return (\n      <div className='signup-login-container'>\n        <section className='container'>\n          <div className={thing}>\n            <div className='front card-div'>HELLO</div>\n            <div className='back card-div'>GOODBYE</div>\n          </div>\n        </section>\n        <button className='create-button' onClick={this.toggle}>\n          {toggle}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import * as ActionTypes from './cardActionTypes';\n\nexport const updateCardField = (e) => ({\n  type: ActionTypes.UPDATE_FIELD,\n  payload: { [e.target.name]: e.target.value },\n});\n\nexport const updateCheckBox = (e) => {\n  return {\n    type: ActionTypes.UPDATE_CHECKBOX,\n    payload: [e.target.name],\n  };\n};\n\nexport const createCard = (e, card) => async (dispatch) => {\n  e.preventDefault();\n  console.log('CREATING CARD');\n  let response = await fetch(\n    `https://phos-backend.herokuapp.com/cards/create`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(card),\n    }\n  );\n  response = await response.json();\n  dispatch(cardCreated(response.message));\n};\n\nexport const cardCreated = (message) => ({\n  type: ActionTypes.CARD_CREATED,\n  payload: message,\n});\n","export const TYPE = 'TYPE';\nexport const TITLE = 'TITLE';\nexport const DESCRIPTION = 'DESCRIPTION';\nexport const EXAMPLE = 'EXAMPLE';\nexport const REFERENCE = 'REFERENCE';\nexport const TAGS = 'TAGS';\nexport const HIDECREATOR = 'HIDECREATOR';\nexport const PUBLIC = 'PUBLIC';\n\nexport const UPDATE_FIELD = 'UPDATE_FIELD';\nexport const UPDATE_CHECKBOX = 'UPDATE_CHECKBOX';\n\nexport const CREATE_CARD = 'CREATE_CARD';\nexport const CARD_CREATED = 'CARD_CREATED';\n","import * as ActionTypes from './userActionTypes';\n\nexport const updateUserField = (e) => {\n  return {\n    type: ActionTypes.UPDATE_USER_FIELD,\n    payload: { [e.target.name]: e.target.value },\n  };\n};\n\nexport const userPreCheck = (e, user) => {\n  e.preventDefault();\n  if (!user.username || !user.password || !user.passwordDouble) {\n    return {\n      type: ActionTypes.SIGNUP_FAILED,\n      payload:\n        'Username, Password, and a confirmation of your password are required',\n    };\n  } else return createUser(user);\n};\n\nexport const createUser = (user) => async (dispatch) => {\n  // e.preventDefault();\n  let response = await fetch(\n    `https://phos-backend.herokuapp.com/users/signup`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(user),\n    }\n  );\n  response = await response.json();\n  dispatch(userCreated(response.message));\n};\n\nexport const userCreated = (message) => ({\n  type: ActionTypes.USER_CREATED,\n  payload: message,\n});\n\nexport const loginPreCheck = (e, user) => {\n  e.preventDefault();\n  if (!user.username || !user.password) {\n    return {\n      type: ActionTypes.LOGIN_FAILED,\n      payload: 'Please enter a username and password',\n    };\n  } else login(user);\n};\n\nexport const login = (user) => async (dispatch) => {\n  console.log('LOGGING IN', user);\n  let response = await fetch(`https://phos-backend.herokuapp.com/users/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(user),\n  });\n  response = await response.json();\n  dispatch(loggedIn(response.message));\n};\n\nexport const loggedIn = (message) => ({\n  type: ActionTypes.LOGIN,\n  payload: message,\n});\n","export const UPDATE_USER_FIELD = 'UPDATE_USER_FIELD';\nexport const SIGNUP_FAILED = 'SIGNUP_FAILED';\nexport const USER_CREATED = 'USER_CREATED';\nexport const LOGIN_FAILED = 'LOGIN_FAILED';\nexport const LOGIN = 'LOGIN';\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { updateCardField } from '../../../redux/reducers/cards/cardActionCreators';\nimport { updateUserField } from '../../../redux/reducers/user/userActionCreators';\nimport { reducerEval, reducerValue } from '../../../functions/textboxFn';\n\nimport '../../createCard/createCard.css';\n\n//  Required props:\n//\n//  *field* for what the property in the reducer will be for\n//  *description* for what the label for the input will be\n//  *type* for what type of box this will be\n//  *required* if it is necessary\n//  *reducer* for which reducer it should be sent to\n\nconst Textbox = (props) => {\n  return (\n    <div className='textbox'>\n      <label htmlFor={props.field}>{props.field.toUpperCase()}:</label>\n      <input\n        type={props.type || 'text'}\n        name={props.field}\n        placeholder={props.field}\n        onChange={(e) => props.dispatch(e, props)}\n        value={props.state[props.field]}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  cardReducer: state.cardReducer,\n  userReducer: state.userReducer,\n});\n\nconst mapDispatchToProps = {\n  updateCardField: (e) => updateCardField(e),\n  updateUserField: (e) => updateUserField(e),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Textbox);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { updateCardField } from '../../../redux/reducers/cards/cardActionCreators';\n\nimport '../../createCard/createCard.css';\n\nconst LargeTextbox = (props) => {\n  return (\n    <div className='textbox'>\n      <label htmlFor={props.field}>{props.field.toUpperCase()}:</label>\n      <textarea\n        type='text'\n        name={props.field}\n        placeholder={props.field}\n        rows={4}\n        onChange={props.updateCardField}\n        value={props.cardReducer[props.field]}\n      ></textarea>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  cardReducer: state.cardReducer,\n});\n\nconst mapDispatchToProps = {\n  updateCardField: (e) => updateCardField(e),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LargeTextbox);\n","import React from 'react';\n\nconst Button = (props) => {\n  return <button onClick={(e) => props.onEnter(e)}>CLICK ME</button>;\n};\n\nexport default Button;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { updateCheckBox } from '../../../redux/reducers/cards/cardActionCreators';\n\n//  PROPS\n//  checkField for the property in the reducer\n//  VALUE NEEDS TO BE UPDATED FOR A SPECIFIC REDUCER\n//  ONCHANGE NEEDS TO BE UPDATED FOR A SPECIFIC REDUCER\n//  description for what the label next to the checkbox will be\n\nconst CheckBox = (props) => {\n  return (\n    <div className='textbox'>\n      <div>\n        <input\n          type='checkbox'\n          name={props.checkField}\n          value={props.cardReducer.public}\n          onChange={props.updateCheckBox}\n        />\n        <label htmlFor={props.checkField}>{props.description}</label>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  cardReducer: state.cardReducer,\n  collectionReducer: state.collectionReducer,\n});\n\nconst mapDispatchToProps = {\n  updateCheckBox: (e) => updateCheckBox(e),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CheckBox);\n","import React from 'react';\nimport Textbox from '../generalAssets/textBoxes/Textbox';\nimport LargeTextbox from '../generalAssets/textBoxes/LargeTextbox';\nimport Button from '../generalAssets/buttons/Button';\nimport CheckBox from '../generalAssets/buttons/CheckBox';\n\nimport { connect } from 'react-redux';\nimport {\n  updateCardField,\n  createCard,\n} from '../../redux/reducers/cards/cardActionCreators';\n\nimport './createCard.css';\n\nconst CreateCard = (props) => {\n  return (\n    <div>\n      <h1>The Form</h1>\n      <form id='create-card-form'>\n        <div className='form-box'>\n          <Textbox\n            field='type'\n            required={true}\n            state={props.cardReducer}\n            dispatch={(e) => props.updateCardField(e)}\n          />\n          <Textbox\n            field='title'\n            required={true}\n            state={props.cardReducer}\n            dispatch={(e) => props.updateCardField(e)}\n          />\n          <LargeTextbox field='description' required={true} />\n          <LargeTextbox field='example' />\n          <Textbox\n            field='reference'\n            state={props.cardReducer}\n            dispatch={(e) => props.updateCardField(e)}\n          />\n          <Textbox\n            field='tags'\n            state={props.cardReducer}\n            dispatch={(e) => props.updateCardField(e)}\n          />\n          <CheckBox\n            checkField='public'\n            description='Make this private?'\n            reducer='card'\n          />\n          <Button\n            onEnter={(e) => props.createCard(e, props.cardReducer)}\n            reducer='card'\n          />\n        </div>\n      </form>\n      <h2>{props.cardReducer.message}</h2>\n      <ul>\n        {Object.values(props.cardReducer).map((value) => {\n          return <li>{value.toString()}</li>;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  cardReducer: state.cardReducer,\n});\n\nconst mapDispatchToProps = {\n  updateCardField: (e) => updateCardField(e),\n  createCard: (e, card) => createCard(e, card),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateCard);\n","import React from 'react';\nimport TextBox from '../generalAssets/textBoxes/Textbox';\nimport Button from '../generalAssets/buttons/Button';\n\nimport { connect } from 'react-redux';\nimport {\n  updateUserField,\n  createUser,\n  userPreCheck,\n} from '../../redux/reducers/user/userActionCreators';\n\nconst CreateAcount = (props) => {\n  return (\n    <div>\n      <h1>Create an Account</h1>\n      <div>\n        <TextBox\n          field='username'\n          required={true}\n          state={props.userReducer}\n          dispatch={(e) => props.updateUserField(e)}\n        />\n        <TextBox\n          field='password'\n          type='password'\n          required={true}\n          state={props.userReducer}\n          dispatch={(e) => props.updateUserField(e)}\n        />\n        <TextBox\n          field='passwordDouble'\n          type='password'\n          required={true}\n          state={props.userReducer}\n          dispatch={(e) => props.updateUserField(e)}\n        />\n        <TextBox\n          field='fullname'\n          state={props.userReducer}\n          dispatch={(e) => props.updateUserField(e)}\n        />\n        <TextBox\n          field='email'\n          type='email'\n          state={props.userReducer}\n          dispatch={(e) => props.updateUserField(e)}\n        />\n        <TextBox\n          field='phone'\n          type='tel'\n          state={props.userReducer}\n          dispatch={(e) => props.updateUserField(e)}\n        />\n      </div>\n      <Button\n        onEnter={(e) => props.userPreCheck(e, props.userReducer)}\n        reducer='user'\n      />\n      <h1>{props.userReducer.message}</h1>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userReducer: state.userReducer,\n});\n\nconst mapDispatchToProps = {\n  updateUserField: (e) => updateUserField(e),\n  createUser: (e, user) => createUser(e, user),\n  userPreCheck: (e, user) => userPreCheck(e, user),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateAcount);\n","import * as ActionTypes from './collectionActionTypes';\n\nexport const updateCollectionField = (e) => {\n  console.log('UPDATING...');\n  return {\n    type: ActionTypes.UPDATE_COLLECTION_FIELD,\n    payload: { [e.target.name]: e.target.value },\n  };\n};\n// export const updateCollectionField = (e) => ({\n//   type: ActionTypes.UPDATE_COLLECTION_FIELD,\n//   payload: { [e.target.name]: e.target.value },\n// });\n\nexport const updateCheckBox = (e) => {\n  return {\n    type: ActionTypes.UPDATE_CHECKBOX,\n    payload: [e.target.name],\n  };\n};\n\nexport const createCollection = (e, collection) => async (dispatch) => {\n  e.preventDefault();\n  console.log('CREATING collection');\n  let response = await fetch(\n    `https://phos-backend.herokuapp.com/collections/create`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(collection),\n    }\n  );\n  response = await response.json();\n  dispatch(collectionCreated(response.message));\n};\n\nexport const collectionCreated = (message) => ({\n  type: ActionTypes.COLLECTION_CREATED,\n  payload: message,\n});\n","export const UPDATE_COLLECTION_FIELD = 'UPDATE_COLLECTION_FIELD';\n\nexport const CREATE_COLLECTION = 'CREATE_COLLECTION';\nexport const UPDATE_CHECKBOX = 'UPDATE_CHECKBOX';\n\nexport const COLLECTION_CREATED = 'COLLECTION_CREATED';\n","import React from 'react';\nimport TextBox from '../generalAssets/textBoxes/Textbox';\nimport Button from '../generalAssets/buttons/Button';\nimport CheckBox from '../generalAssets/buttons/CheckBox';\n\nimport { connect } from 'react-redux';\nimport {\n  updateCollectionField,\n  createCollection,\n} from '../../redux/reducers/collections/collectionActionCreators';\n\nimport './create-collection.css';\n\nconst CreateCollection = (props) => {\n  console.log('MESSAGE!!', props.collectionReducer);\n  return (\n    <div>\n      <div>\n        <h1>Create a Collection!</h1>\n        <TextBox\n          field='name'\n          required={true}\n          state={props.collectionReducer}\n          dispatch={(e) => props.updateCollectionField(e)}\n        />\n        <TextBox\n          field='tags'\n          required={true}\n          state={props.collectionReducer}\n          dispatch={(e) => props.updateCollectionField(e)}\n        />\n        <CheckBox\n          reducer='collection'\n          checkField='public'\n          description='Make this private?'\n        />\n        <Button\n          onEnter={(e) => props.createCollection(e, props.collectionReducer)}\n        />\n      </div>\n      <h1>{props.collectionReducer.message}</h1>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  collectionReducer: state.collectionReducer,\n});\n\nconst mapDispatchToProps = {\n  updateCollectionField: (e) => updateCollectionField(e),\n  createCollection: (e, collection) => createCollection(e, collection),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateCollection);\n\n// name: {\n//   type: String,\n// },\n// cards: [{ type: Schema.Types.ObjectId, ref: 'Card' }],\n// tags: {\n//   type: Array,\n// },\n// public: {\n//   type: Boolean,\n//   default: false,\n// },\n\n// field='title'\n// required={true}\n// state={props.cardReducer}\n// dispatch={(e) => props.updateCardField(e)}\n","import React, { Component } from 'react';\n\nimport './create-collection.css';\n\nclass ViewAllCollections extends Component {\n  state = {\n    collections: [],\n  };\n\n  componentDidMount = async () => {\n    let collections = await fetch(\n      `https://phos-backend.herokuapp.com/collections/all`,\n      {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n    collections = await collections.json();\n    this.setState({\n      collections: collections,\n    });\n  };\n  // componentDidMount = async () => {\n  //   let collections = await fetch(`http://localhost:3000/collections/all`, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     },\n  //   });\n  //   collections = await collections.json();\n  //   this.setState({\n  //     collections: collections,\n  //   });\n  // };\n\n  render() {\n    console.log('COLLLLLLLLLEEECCTIONS', this.state.collections);\n    return (\n      <div>\n        <h1>THIS IS THE COLLECTIONS</h1>\n        <div className='all-collections'>\n          {this.state.collections.map((collection, i) => {\n            return (\n              <div key={i} className='collection'>\n                <h4>{collection.name}</h4>\n                <h5>Tags:</h5>\n                {collection.tags.map((tag, i) => {\n                  return <p key={i}>{tag}</p>;\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ViewAllCollections;\n","import React from 'react';\nimport Textbox from '../generalAssets/textBoxes/Textbox';\nimport Button from '../generalAssets/buttons/Button';\n\nimport { connect } from 'react-redux';\nimport {\n  updateUserField,\n  createUser,\n  userPreCheck,\n  loginPreCheck,\n} from '../../redux/reducers/user/userActionCreators';\n\nconst Login = (props) => {\n  return (\n    <div>\n      <h1>LOGIN</h1>\n      <div>\n        <Textbox\n          field='username'\n          required={true}\n          state={props.userReducer}\n          dispatch={(e) => props.updateUserField(e)}\n        />\n        <Textbox\n          field='password'\n          type='password'\n          required={true}\n          state={props.userReducer}\n          dispatch={(e) => props.updateUserField(e)}\n        />\n        <Button\n          onEnter={(e) => props.loginPreCheck(e, props.userReducer)}\n          reducer='user'\n        />\n      </div>\n      <h1>{props.userReducer.message}</h1>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  userReducer: state.userReducer,\n});\n\nconst mapDispatchToProps = {\n  updateUserField: (e) => updateUserField(e),\n  createUser: (e, user) => createUser(e, user),\n  userPreCheck: (e, user) => userPreCheck(e, user),\n  loginPreCheck: (e, user) => loginPreCheck(e, user),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Navbar from './components/navbar/Navbar';\nimport Home from './components/home/Home';\nimport Card from './components/card/Card';\nimport CreateCard from './components/createCard/CreateCard';\nimport CreateAccount from './components/account/CreateAccount';\nimport CreateCollection from './components/collections/CreateCollection';\nimport ViewAllCollections from './components/collections/ViewAllCollections';\nimport Login from './components/account/Login';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div>\n      <Navbar />\n      <Switch>\n        <Route exact path='/' render={(props) => <Home {...props} />} />\n        <Route exact path='/card' render={(props) => <Card {...props} />} />\n        <Route\n          exact\n          path='/create-card'\n          render={(props) => <CreateCard {...props} />}\n        />\n        <Route\n          exact\n          path='/create-collection'\n          render={(props) => <CreateCollection {...props} />}\n        />\n        <Route\n          exact\n          path='/create-account'\n          render={(props) => <CreateAccount {...props} />}\n        />\n        <Route exact path='/login' render={(props) => <Login {...props} />} />\n        <Route\n          exact\n          path='/collections/all'\n          render={(props) => <ViewAllCollections {...props} />}\n        />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as ActionTypes from './cardActionTypes';\nlet defaultCardState = {\n  type: '',\n  title: '',\n  description: '',\n  example: '',\n  reference: '',\n  tags: '',\n  public: false,\n  message: '',\n};\n\nexport const cardReducer = (state = defaultCardState, action) => {\n  switch (action.type) {\n    case ActionTypes.UPDATE_FIELD:\n      return {\n        ...state,\n        [Object.keys(action.payload)[0]]: Object.values(action.payload)[0],\n      };\n    case ActionTypes.UPDATE_CHECKBOX:\n      return {\n        ...state,\n        [action.payload]: !state[action.payload],\n      };\n    case ActionTypes.CARD_CREATED:\n      return {\n        ...defaultCardState,\n        message: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\n//NOTE: Object.keys/values will return the key/value pair for each specific text field\n","import * as ActionTypes from './userActionTypes';\nlet defaultUserState = {\n  username: '',\n  password: '',\n  passwordDouble: '',\n  fullname: '',\n  email: '',\n  phone: '',\n  message: '',\n  signup: false,\n};\n\nexport const userReducer = (state = defaultUserState, action) => {\n  switch (action.type) {\n    case ActionTypes.UPDATE_USER_FIELD:\n      return {\n        ...state,\n        [Object.keys(action.payload)[0]]: Object.values(action.payload)[0],\n      };\n    case ActionTypes.SIGNUP_FAILED:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case ActionTypes.USER_CREATED:\n      return {\n        ...defaultUserState,\n        message: 'User has been created!',\n      };\n    case ActionTypes.LOGIN_FAILED:\n      return {\n        ...state,\n        message: action.payload,\n      };\n    case ActionTypes.LOGIN:\n      return {\n        ...state,\n        password: '',\n      };\n    default:\n      return state;\n  }\n};\n","import * as ActionTypes from './collectionActionTypes';\nlet defaultColectionStore = {\n  name: '',\n  tags: '',\n  public: false,\n  message: '',\n};\n\nexport const collectionReducer = (state = defaultColectionStore, action) => {\n  switch (action.type) {\n    case ActionTypes.UPDATE_COLLECTION_FIELD:\n      console.log('HEre:', action.payload);\n      return {\n        ...state,\n        [Object.keys(action.payload)[0]]: Object.values(action.payload)[0],\n      };\n    case ActionTypes.UPDATE_CHECKBOX:\n      return {\n        ...state,\n        [action.payload]: !state[action.payload],\n      };\n    case ActionTypes.COLLECTION_CREATED:\n      console.log('HEEERRREEE', action.payload);\n      return {\n        ...defaultColectionStore,\n        message: 'Collection was created!',\n      };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { ConfigureStore } from './redux/configureStore';\nimport { Provider } from 'react-redux';\n\nconst store = ConfigureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { cardReducer } from './reducers/cards/cardReducer';\nimport { userReducer } from './reducers/user/userReducer';\nimport { collectionReducer } from './reducers/collections/collectionReducer';\n\nexport const ConfigureStore = () => {\n  const store = createStore(\n    combineReducers({ cardReducer, userReducer, collectionReducer }),\n    applyMiddleware(thunk, logger)\n  );\n\n  return store;\n};\n"],"sourceRoot":""}